# Workflow's name
name: Build Electron App For Win/Mac

# Workflow's trigger
on:
  push:
    tags:
      - 'v*.*.*'
env:
  SERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }} # 服务器私钥
  SERVER_HOST: ${{ secrets.SERVER_HOST }} # 服务器IP地址
  USER_NAME: ${{ secrets.USER_NAME }} # 服务器用户名
  cache-name: note

# Workflow's jobs
jobs:
  # job's id
  release:
    # job's name
    name: build and release electron app

    # the type of machine to run the job on
    runs-on: ${{ matrix.os }}

    # create a build matrix for jobs
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    # create steps
    steps:
      - name: Check out git repository
        uses: actions/checkout@v3.0.0

      - name: Install Node.js
        uses: actions/setup-node@v3.0.0
        with:
          node-version: '16'

      - name: Cache nodemodules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: install dependencies
        run: |
          yarn

      - name: build windows app
        if: matrix.os == 'windows-latest'
        run: |
          yarn build:win
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: build mac app
        if: matrix.os == 'macos-latest'
        run: |
          yarn build:mac
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: cleanup windows artifacts
        if: matrix.os == 'windows-latest'
        run: |
          yarn rimraf "dist/!(*.exe)"

      - name: cleanup macos artifacts
        if: matrix.os == 'macos-latest'
        run: |
          yarn rimraf "dist/!(*.dmg)"

      - name: upload artifacts
        uses: actions/upload-artifact@v3.0.0
        with:
          name: ${{ matrix.os }}
          path: dist

      - name: release
        uses: softprops/action-gh-release@v0.1.14
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: 'dist/**'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: FTP-Deploy-Action
      uses: SamKirkland/FTP-Deploy-Action@2.0.0 # 使用的sftp插件，将项目传到服务器上，这里使用2.0版本，最新版本4.0不支持sftp
      env:
        FTP_SERVER: ${{ secrets.SERVER_IP }} # nginx服务器公网ip
        FTP_USERNAME: ${{ secrets.USERNAME }} # nginx服务器用户名
        FTP_PASSWORD: ${{ secrets.PASSWORD }} # nginx服务器密码
        LOCAL_DIR: 'dist/**'
        REMOTE_DIR: ${{ secrets.SERVER_DESTINATION }} # 放到nginx服务器上的什么位置
        METHOD: sftp # 指定服务为sftp
        PORT: ${{ SERVER_PORT }} # nginx服务器ssh端口
